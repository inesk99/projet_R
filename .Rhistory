library(PackageRegLog)
library(roxygen2)
library(devtools)
library(usethis)
library(devtools)
source("C:/Users/micka/OneDrive/Bureau/PackageRegLog/R/print.R")
library(devtools)
library(usethis)
library(devtools)
library(roxygen2)
library(PackageRegLog)
library(PackageRegLog)
data = read.csv("C:/Users/micka/OneDrive/Documents/jeux données/cancer2.csv",sep = ",")
?fit
a = fit(diagnosis~. data = data,ncores = 0 )
a = fit(diagnosis~., data = data,ncores = 0)
View(data)
data = read.csv("C:/Users/micka/OneDrive/Documents/jeux données/data_breast_cancer.csv",sep = ",")
a = fit(diagnosis~., data = data,ncores = 0)
library(PackageRegLog)
library(PackageRegLog)
a = fit(diagnosis~., data = data,ncores = 0)
data = read.csv("C:/Users/micka/OneDrive/Documents/jeux données/data_breast_cancer.csv",sep = ",",stringsAsFactors = TRUE)
a = fit(diagnosis~., data = data,ncores = 0)
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.01)
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.01,epsilon = 1e-10)
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.01,epsilon = 1e-10,batch_size = nrow(data))
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.01,epsilon = 1e-60,batch_size = 1)
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.1,epsilon = 1e-60,batch_size = 1)
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.1,epsilon = 1e-60,batch_size = 100)
y_pred = predict(a,data[,-2],type = "class")
print(a)
print(a$coef)
class(a)
library(PackageRegLog)
library(PackageRegLog)
a = fit(diagnosis~., data = data,ncores = 0,learning_rate = 0.1,epsilon = 1e-60,batch_size = 100)
y_pred = predict(a,data[,-2],type = "class")
y_pred
data = read.csv("C:/Users/micka/OneDrive/Documents/jeux données/data_breast_cancer.csv",sep = ",",stringsAsFactors = TRUE)
usethis::use_data(cancer)
c
cancer = read.csv("C:/Users/micka/OneDrive/Documents/jeux données/data_breast_cancer.csv",sep = ",",stringsAsFactors = TRUE)
usethis::use_data(cancer)
library(PackageRegLog)
library(PackageRegLog)
data = PackageRegLog::cancer
print(data)
a = fit(diagnosis~., data = data,ncores = 0,batch_size = nrow(data))
View(data)
library(PackageRegLog)
library(PackageRegLog)
data = PackageRegLog::cancer
a = fit(diagnosis~., data = data,ncores = 0,batch_size = nrow(data))
print(a)
a
print(a$coef)
print.Reg_Logistique(a)
class(a)
UseMethod(print)
UseMethod("print")
methods(print)
methods(summary)
print(a)
print(a)
x = cat("test",a$call)
usethis::use_data(cancer)
library(PackageRegLog)
data = PackageRegLog::cancer
print(data)
a = fit(diagnosis~., data = data,ncores = 0,batch_size = nrow(data))
print(a)
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
devtools::install_github("inesk99/projet_R")
library(PackageRegLog)
donne = PackageRegLog::cancer
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = 100,ncores = 0)
print(a)
summary(a)
y_pred = predict(a,newdata = donne[,-2],type = "class")
y_pred
library(PackageRegLog)
library(PackageRegLog)
donne = PackageRegLog::cancer
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = 100,ncores = 0)
print(a)
summary(a)
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = nrow(donne),ncores = 2)
library(PackageRegLog)
library(PackageRegLog)
donne = PackageRegLog::cancer
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = nrow(donne),ncores = 2)
print(a)
library(PackageRegLog)
donne = PackageRegLog::cancer
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = nrow(donne),ncores = 2)
print(a)
summary(a)
y_pred = predict(a,newdata = donne[,-2],type = "class")
y_pred
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = nrow(donne),ncores = 2)
a = fit(diagnosis~.,data = donne,learning_rate = 0.1,batch_size = nrow(donne),ncores = 6)
print(a)
install.packages("caret")
library(caret)
library(readxl)
card = read_excel("C:/Users/ikara/Downloads/donnes test package/default-of-credit-card-clients.xls")
View(card)
# séparation en train / test
index = createDataPartition(card$default, p = 0.70, list = FALSE)
train = card[index, ]
test = card[-index, ]
a = fit(default~., data = train,ncores = 0,learning_rate = 0.2)
type = "class"
if(type != "class"){
print("quelque chose")
}
if(type != "class" ||type != "class" ){
print("quelque chose")
}
if(type != "class" ||type != "posterior" ){
print("quelque chose")
}
if(type != "class" | type != "posterior" ){
print("quelque chose")
}
if(type != "class" & type != "posterior" ){
print("quelque chose")
}
type = "post"
if(type != "class" & type != "posterior" ){
print("quelque chose")
}
type = "posterior"
if(type != "class" & type != "posterior" ){
print("quelque chose")
}
a = fit(default~., data = train,ncores = 0,learning_rate = 0.2,batch_size = 100)
library(PackageRegLog)
library(PackageRegLog)
card = read_excel("C:/Users/ikara/Downloads/donnes test package/default-of-credit-card-clients.xls")
# séparation en train / test
index = createDataPartition(card$default, p = 0.70, list = FALSE)
train = card[index, ]
test = card[-index, ]
a = fit(default~., data = train,ncores = 0,learning_rate = 0.2,batch_size = 100)
a = fit(default~., data = train,ncores = 3,learning_rate = 0.2,batch_size = 100)
a = fit(default~., data = train,ncores = 3,learning_rate = 0.2,batch_size = nrow(train))
print(a)
y_test = test$default
summary(a)
x_test = test[,-ncol(test)]
x_test
View(x_test)
y_pred = predict(a,newdata = x_test,type = "class")
x_test = as.data.frame(x_test)
y_pred = predict(a,newdata = x_test,type = "class")
View(x_test)
View(test)
library(PackageRegLog)
card = read_excel("C:/Users/ikara/Downloads/donnes test package/default-of-credit-card-clients.xls")
# séparation en train / test
index = createDataPartition(card$default, p = 0.70, list = FALSE)
train = card[index, ]
test = card[-index, ]
a = fit(default~., data = train,ncores = 0,learning_rate = 0.2,batch_size = nrow(train))
print(a)
summary(a)
y_test = test$default
x_test = test[,-ncol(test)]
x_test = as.data.frame(x_test)
y_pred = predict(a,newdata = x_test,type = "class")
y_pred
#Matrice de confusion
p =cbind("Y_test"= y_test,"y_pred"= y_pred)
p
p = as.data.frame(p)
confusion_matrix = table(p$y_pred,p$Y_test)
confusion_matrix
accuracy=(confusion_matrix[1,1]+confusion_matrix[2,2])/sum(confusion_matrix) ; accuracy
error_rate = 1-accuracy ; error_rate
a = fit(default~., data = train,ncores = 0,learning_rate = 0.01,batch_size = nrow(train),epsilon = 1e-6)
print(a)
summary(a)
y_pred = predict(a,newdata = x_test,type = "class")
#Matrice de confusion
p =cbind("Y_test"= y_test,"y_pred"= y_pred)
p = as.data.frame(p)
confusion_matrix = table(p$y_pred,p$Y_test)
confusion_matrix
accuracy=(confusion_matrix[1,1]+confusion_matrix[2,2])/sum(confusion_matrix) ; accuracy
error_rate = 1-accuracy ; error_rate
a = fit(default~., data = train,ncores = 0,learning_rate = 0.01,batch_size = 600,epsilon = 1e-4,)
print(a)
summary(a)
y_pred = predict(a,newdata = x_test,type = "class")
#Matrice de confusion
p =cbind("Y_test"= y_test,"y_pred"= y_pred)
p = as.data.frame(p)
confusion_matrix = table(p$y_pred,p$Y_test)
confusion_matrix
accuracy=(confusion_matrix[1,1]+confusion_matrix[2,2])/sum(confusion_matrix) ; accuracy
error_rate = 1-accuracy ; error_rate
error_rate*100
a = fit(default~., data = train,ncores = 0,learning_rate = 0.001,batch_size = 600,epsilon = 1e-4,)
y_test = test$default
x_test = test[,-ncol(test)]
x_test = as.data.frame(x_test)
y_pred = predict(a,newdata = x_test,type = "class")
#Matrice de confusion
p =cbind("Y_test"= y_test,"y_pred"= y_pred)
p = as.data.frame(p)
confusion_matrix = table(p$y_pred,p$Y_test)
confusion_matrix
accuracy=(confusion_matrix[1,1]+confusion_matrix[2,2])/sum(confusion_matrix) ; accuracy
error_rate = 1-accuracy ; error_rate
error_rate*100
a = fit(default~., data = train,ncores = 0,learning_rate = 0.1,batch_size = 600,epsilon = 1e-4,)
y_test = test$default
x_test = test[,-ncol(test)]
x_test = as.data.frame(x_test)
y_pred = predict(a,newdata = x_test,type = "class")
#Matrice de confusion
p =cbind("Y_test"= y_test,"y_pred"= y_pred)
p = as.data.frame(p)
?fit
help(fit)
